NAME:

    SmartJax - An Asynchronous JavaScript and XML (AJAX) library for PHP. I'll
    use the term "AJAX" loosely here, since the XML part is optional. By default
    SmartJax passes Javascript Object Notation (JSON), but can also pass XML and
    plain text.

AUTHOR:
    Monte Ohrt <monte [AT] ohrt [DOT] com>

LATEST VERSION:
    1.0 (March 10, 2006)


DESCRIPTION
-----------

    SmartJax xmlhttprequest library is originally adapted from the My-BIC
    library (with permission) by Jim Plush. Feel free to use this code in your
    own programs under the LGPL license terms.


PREREQUESITS
------------

    Your server must have PHP installed. Any version 4.x and up will do.


INSTALLATION
------------

    * Untar the SmartJax distribution in your web server DOCUMENT_ROOT.
    * That's it. Really. Everything will be in a /smartjax/ folder.

    Go to the helloworld example in your browser:
    
    http://[YOURSERVER]/smartjax/examples/helloworld.php

    Here you can see three different examples of using SmartJax:
    
    helloworld: passing a single string through SmartJax
    random: passing a multi-value array through SmartJax
    addnum: processing form data through SmartJax


HOW IT WORKS
------------
    
    The guts happen here:
    
    sjObj.call("helloworld", cbHello);
    
    If you look in the /plugins/ directory of the distribution, there is a PHP
    file that corresponds to the first argument, "helloworld.php" in this
    example. That file is automagically used to process the xmlhttprequest and
    return a response. The second argument is the client-side javascript
    function (callback) that will handle the response and do something with
    it.


USING SMARTJAX
--------------

    One very important point: SmartJax can be used in a way that allows your
    smartjax-ified features to function with or without xmlhttprequest or even
    javascript. This is a key importance that I see abused with many AJAX
    implementations. All of the examples I give will be done in a way to make
    the application work both ways. That is, if xmlhttprequest fails or
    javascript is disabled, the page will redraw (as an alternative) to refresh
    the contents. This way your webpage can closely follow accessability
    standards without giving up the opportunity to use xmlhttprequest where
    applicable.

    View the HTML source for the helloworld example that comes with SmartJax.

    You will see a basic javascript setup similar to this:
    
    <html>
    <head>    
    <script type="text/javascript" src="/smartjax/smartjax.js"></script>
    <script type="text/javascript">
      var sjObj = new SMARTJAX("/smartjax/smartjax_server.php");
      function smartjax_hello() {
        return sjObj.call("helloworld", cbHello);
      }
      function cbHello(resp) {
        document.getElementById('content').innerHTML = resp;
      }
    </script>
    </head>
    <body>
    <a href="" onclick="return(!smartjax_hello());">click me!</a>
    <div id="mystuff"></div>
    </body>
    </html>


    The <script> stuff goes into the <head></head> portion of your HTML
    document. You will always need to include the smartjax.js file:
    
    <script type="text/javascript" src="/smartjax/smartjax.js"></script>
   
    You will need to instantiate the sjObj once:
    
    <script type="text/javascript">
       var sjObj = new SMARTJAX("/smartjax/smartjax_server.php");
    </script>
    
    /smartjax/smartjax_server.php is the path to the server-side PHP script
    (relative to DOCUMENT_ROOT) used to execute the xmlhttprequest. If you
    installed SmartJax elsewhere, change that value accordingly.
    
    Then you will need to define two javascript functions: one that handles the
    xmlhttprequest call (in our example, smartjax_hello) and one that handles
    the response (in our example, cbHello)
    
    In your HTML page, you will use some javascript that fires off the
    xmlhttprequest. This is typically happens with an onclick or onsubmit or
    onload:
    
    <a href="" onclick="return(!smartjax_hello());">click me!</a>
    
    When the link is clicked, the smartjax_hello() function is executed. Notice
    the return statement:
    
    onclick="return(!smartjax_hello());"
    
    I didn't do onclick="smartjax_hello(); return false;" because I want the
    link to refresh the page if javascript or xmlhttprequest fails. By doing
    onclick="return(!smartjax_hello());" I have left the return value up to the
    executed javascript function. This way you can program the link to work
    either way. You can do the same thing on a form submit:
    
    <input type="submit" name="submit" onsubmit="return(!smartjax_hello());">
    
    The called javascript function will typically look like this:
    
    function smartjax_hello() {
        return sjObj.call("helloworld", cbHello);
    }
    
    sjObj.call() sends an xmlhttprequest back to the web server.
    
    The first argument is the action name. In the SmartJax distribution you will
    find a /plugins/ directory with the file helloworld.php. This is the file
    that will handle the xmlhttprequest and return the response. It must be
    named identical to the action name give in the first argument.
    
    The second argument is the javascript callback function that will do
    something with the xmlhttprequest response:
    
    function cbHello(resp) {
        document.getElementById('mystuff').innerHTML = resp;
    }
    
    Our example replaces the contents of a <div> tag with the response
    text.
    
    The smartjax_hello() function will return true if the xmlhttprequest call
    was successful, or false otherwise. This is how your onclick/onsubmit will
    refresh the page if there was a failure. It is up to you to program how your
    content is updated on a page refresh (just as you would without SmartJax.)
    
    On the server side, the corresponding script in the /plugins/ directory
    (matching the action) will be located and executed.
    
    The plugin must contain a class named the same as the filename, "helloworld"
    in our example. That class has two important methods: return_response() and
    is_authorized().
    
    The is_authorized() method must return true or false. If it returns false,
    the xmlhttprequest will fail. This is used to test that the server script is
    not being used maliciously (repeated attempts, flooding, etc.) That will be
    left as and excercise to you. By default, it just returns true.
    
    The return_response() method will be responsible for doing something with
    the request and returning a value. You can either return a string of text,
    or a PHP associative array of values. Either one will be converted into
    javascript. helloworld.php is an example of passing a string, addnum.php is
    an example of passing an array of values. You can also return a valid XML
    document if you setup SmartJax for XML instead of JSON, explained further
    below.
    
    Within the plugin, all request variables passed from the browser are
    available from $this->request.
    
    

WORKING WITH FORMS
------------------

    If you have a form on your page that you want submitted along with your
    xmlhttprequest, call the loadForm() function first, passing the id of the
    form:
    
    <script>
    function smartjax_helloworld() {
        sjObj.loadForm("myform");
        return sjObj.call("helloworld", cbHello);
    }
    </script>
    
    <form id="myform" action="" method="post">...</form>
    
    The form information will be passed along in the xmlhttprequest, and is
    available from inside the plugin as $this->request (along with any other
    request vars.)
    
    If you have multiple forms, load each one separately:
    
    sjObj.loadForm("myform1");
    sjObj.loadForm("myform2");
    sjObj.call("helloworld",cbHello);
    
    
ADDING QUERY VARS
-----------------    
    
    You can pass along additional query vars with addVars:
    
    sjObj.addVars("foo1=bar1&foo2=bar2");
    sjObj.call("helloworld",cbHello);    
    
    
OPTIONAL SETTINGS
-----------------

    The sjObj has several options, defined below:
            
    sjObj.method = "POST"; // can be "POST" or "GET"
    
        By default, SmartJax uses xmlhttprequest with the POST method. For most
        purposes this works just fine. If you want to use GET, then change it to
        "GET".
        
    sjObj.format = "JSON"; // can be "JSON", "XML" or "TEXT"
    
        This is the format the returned data will be. If you return an XML
        document from PHP, then change this to XML so it can be traversed
        correctly. Default is "JSON", meaning any text or PHP vars are converted
        to JSON and available in your javascript as a javascript array. So a PHP
        array(array("foo" => "blah", "bar" => "baz")) Can be accessed in
        javascript as resp.foo, resp.bar.
        
    sjObj.async = true; // can be true or false
    
        use xmlhttprequest in sync or async mode. Usually left alone.
        
    sjObj.user = 'username';
    sjObj.pass = 'password';
    
        If the xmlhttprequest requires an HTTP Authorization, fill them in here.
        
    sjObj.show_errors = true; // can be true or false
    
        This determines if errors bring up a javascript alert box or not. By
        default this is set to true.
        
    sjObj.send_headers = Array();
    
        This is an optional array of extra HTTP headers sent with the
        xmlhttprequest.
        

    
ADVANCED INSTALLATION
---------------------

When you install SmartJax, everything is located in a /smartjax/ directory under
your server DOCUMENT_ROOT. This directory contains:

COPYING.lib
README
smartjax.js
smartjax_server.php
jsonlib.php
/plugins/
/examples/

COPYING.lib and README are text files that are not used by SmartJax.

/examples/ contains the files directly access by the browser and can be located
anywhere under your server DOCUMENT_ROOT. Everything else should be in the
/smartjax/ directory.

If you want to move the location of the entire /smartjax/ directory, just make
sure you adjust your client-side paths (two of them):

<script type="text/javascript" src="/path/to/smartjax.js"></script>

var sjObj = new SMARTJAX("/path/to/smartjax_server.php");

So long as the /plugins/ dir is relative to the smartjax_server.php file, the
plugins will be found. Otherwise you must set the SMARTJAX_PLUGINS definition in
the smartjax_server.php file.



CREDITS
-------

    Thanks goes to Jim Plush, the developer of My-BIC which I used as a starting
    point for SmartJax. Be sure to visit his webpage and try My-BIC, as its
    development is also ongoing and under its own direction.

    http://www.litfuel.net/mybic/


COPYRIGHT:

    Copyright(c) 2006 New Digital Group, Inc. All rights reserved.

    This library is free software; you can redistribute it and/or modify it
    under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation; either version 2.1 of the License, or (at
    your option) any later version.

    This library is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
    License for more details.
